// source: query/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.query.EnvelopeToSign', null, global);
goog.exportSymbol('proto.query.GetPollRequest', null, global);
goog.exportSymbol('proto.query.PollAnswer', null, global);
goog.exportSymbol('proto.query.PollQuestion', null, global);
goog.exportSymbol('proto.query.PollSchema', null, global);
goog.exportSymbol('proto.query.PollSchema.QA', null, global);
goog.exportSymbol('proto.query.PollSchema.QuestionType', null, global);
goog.exportSymbol('proto.query.PollWithPublicKey', null, global);
goog.exportSymbol('proto.query.PublicKey', null, global);
goog.exportSymbol('proto.query.RSASignature', null, global);
goog.exportSymbol('proto.query.SignedEnvelope', null, global);
goog.exportSymbol('proto.query.VoteReply', null, global);
goog.exportSymbol('proto.query.VoteRequest', null, global);
goog.exportSymbol('proto.query.VoteToken', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.EnvelopeToSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.EnvelopeToSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.EnvelopeToSign.displayName = 'proto.query.EnvelopeToSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.PollWithPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.PollWithPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.PollWithPublicKey.displayName = 'proto.query.PollWithPublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.GetPollRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.GetPollRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.GetPollRequest.displayName = 'proto.query.GetPollRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.PollAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.PollAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.PollAnswer.displayName = 'proto.query.PollAnswer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.PollSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.PollSchema.repeatedFields_, null);
};
goog.inherits(proto.query.PollSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.PollSchema.displayName = 'proto.query.PollSchema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.PollSchema.QA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.PollSchema.QA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.PollSchema.QA.displayName = 'proto.query.PollSchema.QA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.PollQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.PollQuestion.repeatedFields_, null);
};
goog.inherits(proto.query.PollQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.PollQuestion.displayName = 'proto.query.PollQuestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.PublicKey.displayName = 'proto.query.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.RSASignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.RSASignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.RSASignature.displayName = 'proto.query.RSASignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.SignedEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.SignedEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.SignedEnvelope.displayName = 'proto.query.SignedEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.VoteReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.VoteReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.VoteReply.displayName = 'proto.query.VoteReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.VoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.VoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.VoteRequest.displayName = 'proto.query.VoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.VoteToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.VoteToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.VoteToken.displayName = 'proto.query.VoteToken';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.EnvelopeToSign.prototype.toObject = function(opt_includeInstance) {
  return proto.query.EnvelopeToSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.EnvelopeToSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.EnvelopeToSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    envelope: msg.getEnvelope_asB64(),
    pollid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    token: (f = msg.getToken()) && proto.query.VoteToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.EnvelopeToSign}
 */
proto.query.EnvelopeToSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.EnvelopeToSign;
  return proto.query.EnvelopeToSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.EnvelopeToSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.EnvelopeToSign}
 */
proto.query.EnvelopeToSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEnvelope(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPollid(value);
      break;
    case 3:
      var value = new proto.query.VoteToken;
      reader.readMessage(value,proto.query.VoteToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.EnvelopeToSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.EnvelopeToSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.EnvelopeToSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.EnvelopeToSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvelope_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPollid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.VoteToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes envelope = 1;
 * @return {!(string|Uint8Array)}
 */
proto.query.EnvelopeToSign.prototype.getEnvelope = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes envelope = 1;
 * This is a type-conversion wrapper around `getEnvelope()`
 * @return {string}
 */
proto.query.EnvelopeToSign.prototype.getEnvelope_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEnvelope()));
};


/**
 * optional bytes envelope = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnvelope()`
 * @return {!Uint8Array}
 */
proto.query.EnvelopeToSign.prototype.getEnvelope_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEnvelope()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.EnvelopeToSign} returns this
 */
proto.query.EnvelopeToSign.prototype.setEnvelope = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 pollid = 2;
 * @return {number}
 */
proto.query.EnvelopeToSign.prototype.getPollid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.EnvelopeToSign} returns this
 */
proto.query.EnvelopeToSign.prototype.setPollid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional VoteToken token = 3;
 * @return {?proto.query.VoteToken}
 */
proto.query.EnvelopeToSign.prototype.getToken = function() {
  return /** @type{?proto.query.VoteToken} */ (
    jspb.Message.getWrapperField(this, proto.query.VoteToken, 3));
};


/**
 * @param {?proto.query.VoteToken|undefined} value
 * @return {!proto.query.EnvelopeToSign} returns this
*/
proto.query.EnvelopeToSign.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.EnvelopeToSign} returns this
 */
proto.query.EnvelopeToSign.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.EnvelopeToSign.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.PollWithPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.query.PollWithPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.PollWithPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollWithPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.query.PublicKey.toObject(includeInstance, f),
    poll: (f = msg.getPoll()) && proto.query.PollSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.PollWithPublicKey}
 */
proto.query.PollWithPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.PollWithPublicKey;
  return proto.query.PollWithPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.PollWithPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.PollWithPublicKey}
 */
proto.query.PollWithPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.PublicKey;
      reader.readMessage(value,proto.query.PublicKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.query.PollSchema;
      reader.readMessage(value,proto.query.PollSchema.deserializeBinaryFromReader);
      msg.setPoll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.PollWithPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.PollWithPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.PollWithPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollWithPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.query.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getPoll();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.PollSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey key = 1;
 * @return {?proto.query.PublicKey}
 */
proto.query.PollWithPublicKey.prototype.getKey = function() {
  return /** @type{?proto.query.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.query.PublicKey, 1));
};


/**
 * @param {?proto.query.PublicKey|undefined} value
 * @return {!proto.query.PollWithPublicKey} returns this
*/
proto.query.PollWithPublicKey.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.PollWithPublicKey} returns this
 */
proto.query.PollWithPublicKey.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.PollWithPublicKey.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PollSchema poll = 2;
 * @return {?proto.query.PollSchema}
 */
proto.query.PollWithPublicKey.prototype.getPoll = function() {
  return /** @type{?proto.query.PollSchema} */ (
    jspb.Message.getWrapperField(this, proto.query.PollSchema, 2));
};


/**
 * @param {?proto.query.PollSchema|undefined} value
 * @return {!proto.query.PollWithPublicKey} returns this
*/
proto.query.PollWithPublicKey.prototype.setPoll = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.PollWithPublicKey} returns this
 */
proto.query.PollWithPublicKey.prototype.clearPoll = function() {
  return this.setPoll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.PollWithPublicKey.prototype.hasPoll = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.GetPollRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.GetPollRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.GetPollRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.GetPollRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.GetPollRequest}
 */
proto.query.GetPollRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.GetPollRequest;
  return proto.query.GetPollRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.GetPollRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.GetPollRequest}
 */
proto.query.GetPollRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPollid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.GetPollRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.GetPollRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.GetPollRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.GetPollRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 pollid = 1;
 * @return {number}
 */
proto.query.GetPollRequest.prototype.getPollid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.GetPollRequest} returns this
 */
proto.query.GetPollRequest.prototype.setPollid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.PollAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.query.PollAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.PollAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    answers: (f = msg.getAnswers()) && proto.query.PollSchema.toObject(includeInstance, f),
    sign: (f = msg.getSign()) && proto.query.RSASignature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.PollAnswer}
 */
proto.query.PollAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.PollAnswer;
  return proto.query.PollAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.PollAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.PollAnswer}
 */
proto.query.PollAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.PollSchema;
      reader.readMessage(value,proto.query.PollSchema.deserializeBinaryFromReader);
      msg.setAnswers(value);
      break;
    case 2:
      var value = new proto.query.RSASignature;
      reader.readMessage(value,proto.query.RSASignature.deserializeBinaryFromReader);
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.PollAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.PollAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.PollAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.query.PollSchema.serializeBinaryToWriter
    );
  }
  f = message.getSign();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.RSASignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional PollSchema answers = 1;
 * @return {?proto.query.PollSchema}
 */
proto.query.PollAnswer.prototype.getAnswers = function() {
  return /** @type{?proto.query.PollSchema} */ (
    jspb.Message.getWrapperField(this, proto.query.PollSchema, 1));
};


/**
 * @param {?proto.query.PollSchema|undefined} value
 * @return {!proto.query.PollAnswer} returns this
*/
proto.query.PollAnswer.prototype.setAnswers = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.PollAnswer} returns this
 */
proto.query.PollAnswer.prototype.clearAnswers = function() {
  return this.setAnswers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.PollAnswer.prototype.hasAnswers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RSASignature sign = 2;
 * @return {?proto.query.RSASignature}
 */
proto.query.PollAnswer.prototype.getSign = function() {
  return /** @type{?proto.query.RSASignature} */ (
    jspb.Message.getWrapperField(this, proto.query.RSASignature, 2));
};


/**
 * @param {?proto.query.RSASignature|undefined} value
 * @return {!proto.query.PollAnswer} returns this
*/
proto.query.PollAnswer.prototype.setSign = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.PollAnswer} returns this
 */
proto.query.PollAnswer.prototype.clearSign = function() {
  return this.setSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.PollAnswer.prototype.hasSign = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.PollSchema.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.PollSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.query.PollSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.PollSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.query.PollSchema.QA.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.PollSchema}
 */
proto.query.PollSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.PollSchema;
  return proto.query.PollSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.PollSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.PollSchema}
 */
proto.query.PollSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.PollSchema.QA;
      reader.readMessage(value,proto.query.PollSchema.QA.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.PollSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.PollSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.PollSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.query.PollSchema.QA.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.query.PollSchema.QuestionType = {
  OPEN: 0,
  CHECKBOX: 1,
  CLOSE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.PollSchema.QA.prototype.toObject = function(opt_includeInstance) {
  return proto.query.PollSchema.QA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.PollSchema.QA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollSchema.QA.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.PollSchema.QA}
 */
proto.query.PollSchema.QA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.PollSchema.QA;
  return proto.query.PollSchema.QA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.PollSchema.QA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.PollSchema.QA}
 */
proto.query.PollSchema.QA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 2:
      var value = /** @type {!proto.query.PollSchema.QuestionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.PollSchema.QA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.PollSchema.QA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.PollSchema.QA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollSchema.QA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string question = 1;
 * @return {string}
 */
proto.query.PollSchema.QA.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.query.PollSchema.QA} returns this
 */
proto.query.PollSchema.QA.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional QuestionType type = 2;
 * @return {!proto.query.PollSchema.QuestionType}
 */
proto.query.PollSchema.QA.prototype.getType = function() {
  return /** @type {!proto.query.PollSchema.QuestionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.query.PollSchema.QuestionType} value
 * @return {!proto.query.PollSchema.QA} returns this
 */
proto.query.PollSchema.QA.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string answer = 3;
 * @return {string}
 */
proto.query.PollSchema.QA.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.query.PollSchema.QA} returns this
 */
proto.query.PollSchema.QA.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated QA questions = 1;
 * @return {!Array<!proto.query.PollSchema.QA>}
 */
proto.query.PollSchema.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.query.PollSchema.QA>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.PollSchema.QA, 1));
};


/**
 * @param {!Array<!proto.query.PollSchema.QA>} value
 * @return {!proto.query.PollSchema} returns this
*/
proto.query.PollSchema.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.query.PollSchema.QA=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.PollSchema.QA}
 */
proto.query.PollSchema.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.query.PollSchema.QA, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.query.PollSchema} returns this
 */
proto.query.PollSchema.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.PollQuestion.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.PollQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.query.PollQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.PollQuestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    schema: (f = msg.getSchema()) && proto.query.PollSchema.toObject(includeInstance, f),
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.query.VoteToken.toObject, includeInstance),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.query.PollAnswer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.PollQuestion}
 */
proto.query.PollQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.PollQuestion;
  return proto.query.PollQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.PollQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.PollQuestion}
 */
proto.query.PollQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.query.PollSchema;
      reader.readMessage(value,proto.query.PollSchema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.query.VoteToken;
      reader.readMessage(value,proto.query.VoteToken.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 4:
      var value = new proto.query.PollAnswer;
      reader.readMessage(value,proto.query.PollAnswer.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.PollQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.PollQuestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.PollQuestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PollQuestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.PollSchema.serializeBinaryToWriter
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.query.VoteToken.serializeBinaryToWriter
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.query.PollAnswer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.query.PollQuestion.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.PollQuestion} returns this
 */
proto.query.PollQuestion.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PollSchema schema = 2;
 * @return {?proto.query.PollSchema}
 */
proto.query.PollQuestion.prototype.getSchema = function() {
  return /** @type{?proto.query.PollSchema} */ (
    jspb.Message.getWrapperField(this, proto.query.PollSchema, 2));
};


/**
 * @param {?proto.query.PollSchema|undefined} value
 * @return {!proto.query.PollQuestion} returns this
*/
proto.query.PollQuestion.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.PollQuestion} returns this
 */
proto.query.PollQuestion.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.PollQuestion.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated VoteToken tokens = 3;
 * @return {!Array<!proto.query.VoteToken>}
 */
proto.query.PollQuestion.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.query.VoteToken>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.VoteToken, 3));
};


/**
 * @param {!Array<!proto.query.VoteToken>} value
 * @return {!proto.query.PollQuestion} returns this
*/
proto.query.PollQuestion.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.query.VoteToken=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.VoteToken}
 */
proto.query.PollQuestion.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.query.VoteToken, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.query.PollQuestion} returns this
 */
proto.query.PollQuestion.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated PollAnswer votes = 4;
 * @return {!Array<!proto.query.PollAnswer>}
 */
proto.query.PollQuestion.prototype.getVotesList = function() {
  return /** @type{!Array<!proto.query.PollAnswer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.PollAnswer, 4));
};


/**
 * @param {!Array<!proto.query.PollAnswer>} value
 * @return {!proto.query.PollQuestion} returns this
*/
proto.query.PollQuestion.prototype.setVotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.query.PollAnswer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.PollAnswer}
 */
proto.query.PollQuestion.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.query.PollAnswer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.query.PollQuestion} returns this
 */
proto.query.PollQuestion.prototype.clearVotesList = function() {
  return this.setVotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.query.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.PublicKey}
 */
proto.query.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.PublicKey;
  return proto.query.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.PublicKey}
 */
proto.query.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.query.PublicKey.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.query.PublicKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.query.PublicKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.PublicKey} returns this
 */
proto.query.PublicKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.RSASignature.prototype.toObject = function(opt_includeInstance) {
  return proto.query.RSASignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.RSASignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.RSASignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    ballot: msg.getBallot_asB64(),
    sign: msg.getSign_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.RSASignature}
 */
proto.query.RSASignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.RSASignature;
  return proto.query.RSASignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.RSASignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.RSASignature}
 */
proto.query.RSASignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBallot(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.RSASignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.RSASignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.RSASignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.RSASignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBallot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes ballot = 1;
 * @return {!(string|Uint8Array)}
 */
proto.query.RSASignature.prototype.getBallot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ballot = 1;
 * This is a type-conversion wrapper around `getBallot()`
 * @return {string}
 */
proto.query.RSASignature.prototype.getBallot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBallot()));
};


/**
 * optional bytes ballot = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBallot()`
 * @return {!Uint8Array}
 */
proto.query.RSASignature.prototype.getBallot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBallot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.RSASignature} returns this
 */
proto.query.RSASignature.prototype.setBallot = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sign = 2;
 * @return {!(string|Uint8Array)}
 */
proto.query.RSASignature.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sign = 2;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.query.RSASignature.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.query.RSASignature.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.RSASignature} returns this
 */
proto.query.RSASignature.prototype.setSign = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.SignedEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.query.SignedEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.SignedEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.SignedEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    envelope: msg.getEnvelope_asB64(),
    sign: msg.getSign_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.SignedEnvelope}
 */
proto.query.SignedEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.SignedEnvelope;
  return proto.query.SignedEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.SignedEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.SignedEnvelope}
 */
proto.query.SignedEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEnvelope(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.SignedEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.SignedEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.SignedEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.SignedEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvelope_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes envelope = 1;
 * @return {!(string|Uint8Array)}
 */
proto.query.SignedEnvelope.prototype.getEnvelope = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes envelope = 1;
 * This is a type-conversion wrapper around `getEnvelope()`
 * @return {string}
 */
proto.query.SignedEnvelope.prototype.getEnvelope_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEnvelope()));
};


/**
 * optional bytes envelope = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnvelope()`
 * @return {!Uint8Array}
 */
proto.query.SignedEnvelope.prototype.getEnvelope_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEnvelope()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.SignedEnvelope} returns this
 */
proto.query.SignedEnvelope.prototype.setEnvelope = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sign = 2;
 * @return {!(string|Uint8Array)}
 */
proto.query.SignedEnvelope.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sign = 2;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.query.SignedEnvelope.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.query.SignedEnvelope.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.SignedEnvelope} returns this
 */
proto.query.SignedEnvelope.prototype.setSign = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.VoteReply.prototype.toObject = function(opt_includeInstance) {
  return proto.query.VoteReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.VoteReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.VoteReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    mess: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.VoteReply}
 */
proto.query.VoteReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.VoteReply;
  return proto.query.VoteReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.VoteReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.VoteReply}
 */
proto.query.VoteReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.VoteReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.VoteReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.VoteReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.VoteReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMess();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mess = 1;
 * @return {string}
 */
proto.query.VoteReply.prototype.getMess = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.query.VoteReply} returns this
 */
proto.query.VoteReply.prototype.setMess = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.VoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.VoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.VoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.VoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    answers: (f = msg.getAnswers()) && proto.query.PollSchema.toObject(includeInstance, f),
    sign: (f = msg.getSign()) && proto.query.RSASignature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.VoteRequest}
 */
proto.query.VoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.VoteRequest;
  return proto.query.VoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.VoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.VoteRequest}
 */
proto.query.VoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPollid(value);
      break;
    case 2:
      var value = new proto.query.PollSchema;
      reader.readMessage(value,proto.query.PollSchema.deserializeBinaryFromReader);
      msg.setAnswers(value);
      break;
    case 3:
      var value = new proto.query.RSASignature;
      reader.readMessage(value,proto.query.RSASignature.deserializeBinaryFromReader);
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.VoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.VoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.VoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.VoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnswers();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.PollSchema.serializeBinaryToWriter
    );
  }
  f = message.getSign();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.RSASignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 pollid = 1;
 * @return {number}
 */
proto.query.VoteRequest.prototype.getPollid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.VoteRequest} returns this
 */
proto.query.VoteRequest.prototype.setPollid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PollSchema answers = 2;
 * @return {?proto.query.PollSchema}
 */
proto.query.VoteRequest.prototype.getAnswers = function() {
  return /** @type{?proto.query.PollSchema} */ (
    jspb.Message.getWrapperField(this, proto.query.PollSchema, 2));
};


/**
 * @param {?proto.query.PollSchema|undefined} value
 * @return {!proto.query.VoteRequest} returns this
*/
proto.query.VoteRequest.prototype.setAnswers = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.VoteRequest} returns this
 */
proto.query.VoteRequest.prototype.clearAnswers = function() {
  return this.setAnswers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.VoteRequest.prototype.hasAnswers = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RSASignature sign = 3;
 * @return {?proto.query.RSASignature}
 */
proto.query.VoteRequest.prototype.getSign = function() {
  return /** @type{?proto.query.RSASignature} */ (
    jspb.Message.getWrapperField(this, proto.query.RSASignature, 3));
};


/**
 * @param {?proto.query.RSASignature|undefined} value
 * @return {!proto.query.VoteRequest} returns this
*/
proto.query.VoteRequest.prototype.setSign = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.VoteRequest} returns this
 */
proto.query.VoteRequest.prototype.clearSign = function() {
  return this.setSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.VoteRequest.prototype.hasSign = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.VoteToken.prototype.toObject = function(opt_includeInstance) {
  return proto.query.VoteToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.VoteToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.VoteToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.VoteToken}
 */
proto.query.VoteToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.VoteToken;
  return proto.query.VoteToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.VoteToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.VoteToken}
 */
proto.query.VoteToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.VoteToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.VoteToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.VoteToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.VoteToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.query.VoteToken.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes token = 1;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.query.VoteToken.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.query.VoteToken.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.query.VoteToken} returns this
 */
proto.query.VoteToken.prototype.setToken = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.query);
