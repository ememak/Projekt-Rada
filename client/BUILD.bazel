load("@npm//@bazel/concatjs:index.bzl", "concatjs_devserver")
load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("//rules:angular_ts_library.bzl", "ng_ts_library")

package(default_visibility = ["//:__subpackages__"])

ng_ts_library(
    name = "devclient",
    srcs = [
        "main.dev.ts",
    ],
    tsconfig = "//:tsconfig.json",
    deps = [
        "//client/app",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
    ],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

# Files that we serve in both development and production
_ASSETS = [
    ":styles.css",
    # We load zone.js outside the bundle. That's because it's a "pollyfill"
    # which speculates that such features might be available in a browser.
    # Also it's tricky to configure dead code elimination to understand that
    # zone.js is used, given that we don't have any import statement that
    # imports from it.
    "@npm//:node_modules/zone.js/dist/zone.min.js",
]

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath //client:index.dev.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        # This file doesn't exist during the build, but will be served by concatjs_devserver
        "./_/ts_scripts.js",
    ],
    data = ["//client:index.dev.html"] + _ASSETS,
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# named UMD and named AMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
concatjs_devserver(
    name = "devserver",
    # Serve src/example/index.html at /index.html
    # additional_root_paths = ["src/example"],
    # Run the program from the development version of the main
    entry_module = "Projekt_Rada/client/main.dev",
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
        "@npm//google-protobuf:google-protobuf__umd",
        "@npm//@improbable-eng/grpc-web:grpc-web__umd",
    ],
    # Serve these files in addition to the JavaScript bundle
    static_files = _ASSETS + [
        ":inject_scripts_for_dev",
    ],
    # Tell Bazel to build the sources first
    deps = [":devclient"],
)

