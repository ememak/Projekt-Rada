syntax = "proto3";

package query;

service Query {
  rpc KeyExchange(KeyRequest) returns (KeyReply) {
  }
  rpc QueryInit(stream Field) returns (PollQuestion) {
  }  // this will probably not return PollQuestion in the end
  rpc QueryGetToken(TokenRequest) returns (VoteToken) {
  }
  rpc QueryAuthorizeVote(MessageToSign) returns (SignedMessage) {
  }
  rpc QueryVote(SignedVote) returns (VoteReply) {
  }
}

message KeyRequest {
  int32 nr = 1;
}

message KeyReply {
  bytes Key = 1;  // Public Key stored in PKCS1 format.
}

message Field {
  int32 which = 1;  // which field we edit, -1 = new field in query
  string name = 2;  // query option name
}

message MessageToSign {
  bytes mess = 1;
  int32 nr = 2;
  VoteToken token = 3;
}

message PollQuestion {
  int32 id = 1;

  message QueryField {
    string name = 1;
  }

  message StoredVote {
    repeated int32 answer = 1;
  }

  repeated QueryField fields = 2;

  repeated VoteToken tokens = 3;

  repeated StoredVote votes = 4;
}

message TokenRequest {
  int32 nr = 1;
}

message SignedMessage {
  bytes mess = 1;
  bytes sign = 2;
}

// SignedVote is a final vote with RSA sign.
message SignedVote {
  Vote vote = 1;     // vote
  bytes signm = 2;   // Mess, first part of sign
  bytes signmd = 3;  // hash(Mess)^d mod N, second part of sign
}

message Vote {
  int32 nr = 1;               // which question
  repeated int32 answer = 2;  // >=1 answer mean 'yes', for now
}

message VoteReply {
  string mess = 1;
}

message VoteToken {
  bytes token = 1;
}
