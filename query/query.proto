syntax = "proto3";

package query;

service Query {
  // KeyExchange is a function used to exchange server public key for specific poll.
  rpc KeyExchange(KeyRequest) returns (KeyReply) {
  }

  // PollInit generates new query.
  rpc PollInit(PollSchema) returns (PollQuestion) {
  }

  // SignBallot authorizes a ballot if sent with valid token.
  rpc SignBallot(BallotToSign) returns (SignedBallot) {
  }

  // PollVote get signed vote from client, check it's validity and save it.
  rpc PollVote(VoteRequest) returns (VoteReply) {
  }
}

// BallotToSign exchange token for authorizing a ballot.
//
// Ballot is used for voting in specific query.
// If token is valid for this poll, ballot will be signed.
message BallotToSign {
  bytes ballot = 1;
  int32 pollid = 2;
  VoteToken token = 3;
}

// KeyReply contains RSA public key and questions of previously requested poll.
//
// Key is further used in blind signature scheme.
// Poll contains only questions and their types.
message KeyReply {
  PublicKey key = 1;
  PollSchema poll = 2;
}

// KeyRequest is used to ask for RSA public key and questions of a specific poll.
//
// Key is further used in blind signature scheme.
// KeyExchange is supposed to be called at the beginning of the protocol.
message KeyRequest {
  int32 pollid = 1;
}

// PollAnswer is a signed answer to poll questions.
message PollAnswer {
  PollSchema answer = 1;
  SignedBallot ballot = 2;
}

// PublicKey is a RSA public key stored in PKCS1 format.
message PublicKey {
  bytes key = 1;
}

// PollSchema contains poll's questions and answers.
message PollSchema {
  enum QuestionType {
    OPEN = 0; // User can write what he want.
    CHECKBOX = 1; // User have to choose some options from a list.
    CLOSE = 2; // User have to choose one option from a list.
  }

  message QA {
    string question = 1;
    QuestionType type = 2;
    string answer = 3;
  }

  repeated QA questions = 1;
}

// PolLQuestion represents one specific poll.
//
// Structure contains its id, options for voting,
// unused tokens for authorizing votes and accepted votes.
message PollQuestion {
  int32 id = 1;

  PollSchema schema = 2;

  repeated VoteToken tokens = 3;

  repeated PollAnswer votes = 4;
}

// SignedBallot is an authorized respond to BallotToSign.
//
// Ballot is the same value as in BallotToSign.
// Sign is (ballot^d) mod N, message signed by server. This value is
// further used as second part of the signature in VoteRequest.
message SignedBallot {
  bytes ballot = 1;
  bytes sign = 2;
}

// VoteReply is a sent after voting.
//
// If vote was accepted by server, reply is "Thank you for your vote!",
// else it's "Vote error", without specifying the reason of failure.
message VoteReply {
  string mess = 1;
}

// VoteRequest is a final vote with RSA signature.
//
// If the same signature is used twice, vote in system will be replaced.
message VoteRequest {
  int32 pollid = 1;                 // Which question is answered.
  repeated PollSchema answers = 2;  // Answers to all questions.
  SignedBallot ballot = 3;          // RSA blind signature.
}

// VoteToken is a permission to vote in a specific query.
//
// Token value inside is random number (it only have to be unique).
message VoteToken {
  bytes token = 1;
}
